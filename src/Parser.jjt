options
{
  LOOKAHEAD=1;
}
PARSER_BEGIN(Parser)
public class Parser
{
	public static void main(String args[]) throws ParseException {
	  Parser simpleParser = new Parser(System.in);
	  simpleParser.Module();
	}
}
PARSER_END(Parser)
SKIP:
{
	" "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
| <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

/* reserved words */
TOKEN : {
<RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
| <ADDSUB_OP: "+" | "-">
| <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
| <BITWISE_OP: "&" | "|" | "^">
| <NOT_OP: "!">
| <WHILE: "while">
| <IF: "if">
| <ELSE: "else">
| <ASSIGN: "=">
| <ASPA: "\"">
| <LPAR: "(">
| <RPAR: ")">
| <VIRG: ",">
| <PVIRG: ";">
| <LCHAVETA: "{">
| <RCHAVETA: "}">
| <FUNCTION: "function">
| <MODULE: "module">
| <SIZE: "size">
}

TOKEN : {
<INTEGER: (<DIGIT>)+>
| <ID: <LETTER> (<LETTER> | <DIGIT>)*>
| <#LETTER: ["$","A"-"Z","_","a"-"z"]>
| <#DIGIT: ["0"-"9"]>
| <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}

void Module() : { }
{
	<MODULE><ID><LCHAVETA>(Declaration())*(Function())*<RCHAVETA>
}
void Declaration() : { }
{
	(/*ArrayElement()|ScalarElement()*/ ScalarElement())( <ASSIGN> ( ( "[" ArraySize() "]" ) | (
<ADDSUB_OP> )? <INTEGER> ) )? <PVIRG>
}

void Function() : { }
{
	 ( <FUNCTION> ( < ID > ) Function2() )/*<ASSIGN> <ID> <LPAR>( Varlist() )? <RPAR>) | ( <FUNCTION> <ID> <LPAR> ( Varlist() )? <RPAR> ) )<LCHAVETA> Stmtlst() <RCHAVETA>*/
}

void Function2() : { }
{
	((ArrayElement())?<ASSIGN> <ID> <LPAR>( Varlist() )? <RPAR>) | ( <LPAR> ( Varlist() )? <RPAR> ) <LCHAVETA> Stmtlst() <RCHAVETA>
}

void Varlist(): { }
{
	( /*ArrayElement() | ScalarElement()*/ ScalarElement() ) ( <VIRG> ( /*ArrayElement() | ScalarElement()*/ ScalarElement() ) )*
}
/*void ArrayElement(): { }
{
	< ID >"[""]"
}
void ScalarElement(): { }
{
	< ID >
}*/
void ScalarElement(): { }
{
	< ID > (ArrayElement())?
}
void ArrayElement(): { }
{
	"[""]"
}
void Stmtlst(): { }
{
	(Stmt())*
}
void Stmt(): { }
{
	While() | If() | < ID > (LOOKAHEAD(Call()) Call() | Assign()) < PVIRG > //ID
}
void Assign(): { }
{
	Lhs()< ASSIGN >Rhs()<PVIRG>
}
void Lhs(): { }
{
	ArrayAccess() | ScalarAccess()
}
void Rhs(): { }
{
	( Term() ( ( <ARITH_OP> | <BITWISE_OP> | <ADDSUB_OP> ) Term() )? )
| "[" ArraySize() "]"
}
void ArraySize(): { } // ++ ID
{
	< ID > ScalarAccess() | < INTEGER >
}
void Term(): { }
{
	( <ADDSUB_OP> )? ( <INTEGER> | < ID >( ArrayAccess() | ( LOOKAHEAD(Call() ) Call() | ScalarAccess())) ) // ID
}


//LOOKAHEAD(< ID > "=" < SOMETHING >) < ID > "=" < SOMETHING > | < ID > "=" < OTHER >

void Exprtest(): { }
{
	<LPAR> Lhs() <RELA_OP> Rhs() <RPAR>
}
void While(): { }
{
	<WHILE> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA>
}
void If(): {}
{
	<IF> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA> ( <ELSE> <LCHAVETA> Stmtlst() <RCHAVETA> )?
}
void Call(): {} // -- ID
{
	 ( "." <ID> )? <LPAR> ( ArgumentList() )? <RPAR>
}
void ArgumentList():{}
{
	Argument() ( <VIRG> Argument() )*
}
void Argument():{}
{
	( <ID> | <STRING> | <INTEGER> )
}
void ArrayAccess():{} // -- ID
{
	"[" Index() "]"
}
void ScalarAccess():{} // -- ID
{
	( "." <SIZE> )?
}
void Index():{}
{
	<ID>|<INTEGER>
}