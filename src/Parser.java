/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
import java.io.*;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants, ParserConstants {/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();public static void main(String args[]) throws ParseException, IOException {
                if(args.length != 1){
                        System.out.println("Usage: Parser <file.yal>");
                        return;
                }
                String filename = args[0];
                try{

                        BufferedReader br = new BufferedReader(new FileReader(filename));
                        Parser simpleParser = new Parser(br);
                        SimpleNode root = simpleParser.Module();
                        semantic.HIRTree hir = new semantic.HIRTree();
                        root.dump("", hir);
                        hir.dump("");

                }catch(IOException e){
                        e.printStackTrace();
                }
        }

  static final public SimpleNode Module() throws ParseException {
                       /*@bgen(jjtree) Module */
  SimpleNode jjtn000 = new SimpleNode(JJTMODULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MODULE);
      Id();
      jj_consume_token(LCHAVETA);
      DeclarationList();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        Function();
      }
      jj_consume_token(RCHAVETA);
                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                           jjtc000 = false;
                                                                           {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void DeclarationList() throws ParseException {
                         /*@bgen(jjtree) DeclarationList */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        Declaration();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Declaration() throws ParseException {
                      /*@bgen(jjtree) Declaration */
                       SimpleNode jjtn000 = new SimpleNode(JJTDECLARATION);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token assign;
    try {
      ScalarElement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        assign = jj_consume_token(ASSIGN);
                                             jjtn000.val = assign.image;
        DeclarationRHS();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(PVIRG);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void DeclarationRHS() throws ParseException {
                         /*@bgen(jjtree) DeclarationRHS */
                          SimpleNode jjtn000 = new SimpleNode(JJTDECLARATIONRHS);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token id = new Token(); id.image = "undefined";
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        jj_consume_token(31);
        ArraySize();
        jj_consume_token(32);
        break;
      case ADDSUB_OP:
      case INTEGER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADDSUB_OP:
          id = jj_consume_token(ADDSUB_OP);
                                                      jjtn000.val = id.image;
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        Integer();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Function() throws ParseException {
                   /*@bgen(jjtree) Function */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FUNCTION);
                       SimpleNode jjtn001 = new SimpleNode(JJTRETURN);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
      try {
        Function2();
      } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte001;}
                       }
                       if (jjte001 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte001;}
                       }
                       {if (true) throw (Error)jjte001;}
      } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                       }
      }
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
                                                       SimpleNode jjtn002 = new SimpleNode(JJTPARAMETERS);
                                                       boolean jjtc002 = true;
                                                       jjtree.openNodeScope(jjtn002);
        try {
          Varlist();
        } catch (Throwable jjte002) {
                                                       if (jjtc002) {
                                                         jjtree.clearNodeScope(jjtn002);
                                                         jjtc002 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte002 instanceof RuntimeException) {
                                                         {if (true) throw (RuntimeException)jjte002;}
                                                       }
                                                       if (jjte002 instanceof ParseException) {
                                                         {if (true) throw (ParseException)jjte002;}
                                                       }
                                                       {if (true) throw (Error)jjte002;}
        } finally {
                                                       if (jjtc002) {
                                                         jjtree.closeNodeScope(jjtn002, true);
                                                       }
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
      jj_consume_token(LCHAVETA);
      Stmtlst();
      jj_consume_token(RCHAVETA);
    } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  static final public void Function2() throws ParseException {
                           Token id;
    Id();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
    case 31:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        ArrayElement();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(ASSIGN);
      Id();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  static final public void Function3() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      ArrayElement();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(ASSIGN);
    Id();
  }

  static final public void Id() throws ParseException {
             /*@bgen(jjtree) Id */
              SimpleNode jjtn000 = new SimpleNode(JJTID);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token id;
    try {
      id = jj_consume_token(ID);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.val = id.image;
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void Integer() throws ParseException {
                  /*@bgen(jjtree) Integer */
                   SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token integer;
    try {
      integer = jj_consume_token(INTEGER);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                              jjtn000.val = integer.image;
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Varlist() throws ParseException {
             SimpleNode jjtn001 = new SimpleNode(JJTPARAM);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
    try {
      ScalarElement();
    } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte001;}
             }
             if (jjte001 instanceof ParseException) {
               {if (true) throw (ParseException)jjte001;}
             }
             {if (true) throw (Error)jjte001;}
    } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      jj_consume_token(VIRG);
                                                SimpleNode jjtn002 = new SimpleNode(JJTPARAM);
                                                boolean jjtc002 = true;
                                                jjtree.openNodeScope(jjtn002);
      try {
        ScalarElement();
      } catch (Throwable jjte002) {
                                                if (jjtc002) {
                                                  jjtree.clearNodeScope(jjtn002);
                                                  jjtc002 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte002 instanceof RuntimeException) {
                                                  {if (true) throw (RuntimeException)jjte002;}
                                                }
                                                if (jjte002 instanceof ParseException) {
                                                  {if (true) throw (ParseException)jjte002;}
                                                }
                                                {if (true) throw (Error)jjte002;}
      } finally {
                                                if (jjtc002) {
                                                  jjtree.closeNodeScope(jjtn002, true);
                                                }
      }
    }
  }

  static final public void ScalarElement() throws ParseException {
    Id();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      ArrayElement();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  static final public void ArrayElement() throws ParseException {
                      /*@bgen(jjtree) ArrayElement */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAYELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(31);
      jj_consume_token(32);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Stmtlst() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
      case IF:
      case ID:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_4;
      }
      Stmt();
    }
  }

  static final public void Stmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
      While();
      break;
    case IF:
      If();
      break;
    case ID:
      if (jj_2_1(2147483647)) {
        Call();
        jj_consume_token(PVIRG);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          Assign();
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Call() throws ParseException {
              /*@bgen(jjtree) Call */
  SimpleNode jjtn000 = new SimpleNode(JJTCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Id();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
        jj_consume_token(33);
        Id();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case ID:
      case STRING:
        ArgumentList();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  static final public void Assign() throws ParseException {
                /*@bgen(jjtree) Assign */
                 SimpleNode jjtn000 = new SimpleNode(JJTASSIGN);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token assign;
    try {
          SimpleNode jjtn001 = new SimpleNode(JJTARRAY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        Lhs();
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
      }
      assign = jj_consume_token(ASSIGN);
                                            jjtn000.val = assign.image;
      Rhs();
      jj_consume_token(PVIRG);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Lhs() throws ParseException {
    Id();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      ArrayAccess();
      break;
    default:
      jj_la1[16] = jj_gen;
      ScalarAccess();
    }
  }

  static final public void Rhs() throws ParseException {
              /*@bgen(jjtree) Rhs */
               SimpleNode jjtn000 = new SimpleNode(JJTRHS);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token Op  = new Token(); Op.image = "Undefined";
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDSUB_OP:
      case INTEGER:
      case ID:
        Term();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADDSUB_OP:
        case ARITH_OP:
        case BITWISE_OP:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ARITH_OP:
            Op = jj_consume_token(ARITH_OP);
            break;
          case BITWISE_OP:
            Op = jj_consume_token(BITWISE_OP);
            break;
          case ADDSUB_OP:
            Op = jj_consume_token(ADDSUB_OP);
            break;
          default:
            jj_la1[17] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                                                          jjtn000.val = Op.image;
          Term();
          break;
        default:
          jj_la1[18] = jj_gen;
          ;
        }
        break;
      case 31:
        jj_consume_token(31);
        ArraySize();
        jj_consume_token(32);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ArrayAccess() throws ParseException {
                    /*@bgen(jjtree) ArrayAccess */
                     SimpleNode jjtn000 = new SimpleNode(JJTARRAYACCESS);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token ind = new Token(); ind.image = "undefined";
    try {
      jj_consume_token(31);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case ID:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          ind = jj_consume_token(ID);
          break;
        case INTEGER:
          ind = jj_consume_token(INTEGER);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      jj_consume_token(32);
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
                                                 jjtn000.val = ind.image=="undefined"?"[]":"["+ind.image+"]";
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ScalarAccess() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 33:
      jj_consume_token(33);
      jj_consume_token(SIZE);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
  }

  static final public void ArraySize() throws ParseException {
                   /*@bgen(jjtree) ArraySize */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAYSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        Id();
        ScalarAccess();
        break;
      case INTEGER:
        Integer();
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Term() throws ParseException {
              /*@bgen(jjtree) Term */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDSUB_OP:
        jj_consume_token(ADDSUB_OP);
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        Integer();
        break;
      default:
        jj_la1[26] = jj_gen;
        if (jj_2_2(2147483647)) {
          Call();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            Id();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 31:
              ArrayAccess();
              break;
            default:
              jj_la1[25] = jj_gen;
              ScalarAccess();
            }
            break;
          default:
            jj_la1[27] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Exprtest() throws ParseException {
                  /*@bgen(jjtree) Exprtest */
                   SimpleNode jjtn000 = new SimpleNode(JJTEXPRTEST);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token RelOp;
    try {
      jj_consume_token(LPAR);
      Lhs();
      RelOp = jj_consume_token(RELA_OP);
                                       jjtn000.val = RelOp.image;
      Rhs();
      jj_consume_token(RPAR);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void While() throws ParseException {
               /*@bgen(jjtree) While */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      Exprtest();
      jj_consume_token(LCHAVETA);
      Stmtlst();
      jj_consume_token(RCHAVETA);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void If() throws ParseException {
            /*@bgen(jjtree) If */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      Exprtest();
      jj_consume_token(LCHAVETA);
      Stmtlst();
      jj_consume_token(RCHAVETA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        jj_consume_token(LCHAVETA);
                                                                              SimpleNode jjtn001 = new SimpleNode(JJTELSE);
                                                                              boolean jjtc001 = true;
                                                                              jjtree.openNodeScope(jjtn001);
        try {
          Stmtlst();
        } catch (Throwable jjte001) {
                                                                              if (jjtc001) {
                                                                                jjtree.clearNodeScope(jjtn001);
                                                                                jjtc001 = false;
                                                                              } else {
                                                                                jjtree.popNode();
                                                                              }
                                                                              if (jjte001 instanceof RuntimeException) {
                                                                                {if (true) throw (RuntimeException)jjte001;}
                                                                              }
                                                                              if (jjte001 instanceof ParseException) {
                                                                                {if (true) throw (ParseException)jjte001;}
                                                                              }
                                                                              {if (true) throw (Error)jjte001;}
        } finally {
                                                                              if (jjtc001) {
                                                                                jjtree.closeNodeScope(jjtn001, true);
                                                                              }
        }
        jj_consume_token(RCHAVETA);
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ArgumentList() throws ParseException {
                     /*@bgen(jjtree) ArgumentList */
  SimpleNode jjtn000 = new SimpleNode(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Argument();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRG:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_5;
        }
        jj_consume_token(VIRG);
        Argument();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Argument() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      Id();
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case INTEGER:
      Integer();
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public Token Index() throws ParseException {
               /*@bgen(jjtree) Index */
               SimpleNode jjtn000 = new SimpleNode(JJTINDEX);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
        break;
      case INTEGER:
        t = jj_consume_token(INTEGER);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                    {if (true) return t;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_13() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_3R_7()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) jj_scanpos = xsp;
    if (jj_scan_token(LPAR)) return true;
    xsp = jj_scanpos;
    if (jj_3R_9()) jj_scanpos = xsp;
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_3R_11()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(VIRG)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(33)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800000,0x8000000,0x8000,0x100,0x84000100,0x8000000,0x80000000,0x80008000,0x80000000,0x80000,0x80000000,0x8003000,0x8000000,0x8003000,0x0,0x4c000000,0x80000000,0x700,0x700,0x8c000100,0xc000000,0xc000000,0x0,0xc000000,0x100,0x80000000,0x4000000,0x8000000,0x4000,0x80000,0x4c000000,0xc000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 32; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
