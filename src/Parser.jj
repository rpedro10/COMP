/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Parser.jj */
/*@egen*/options
{
  LOOKAHEAD=1;
}

PARSER_BEGIN(Parser)

import java.io.*;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();

/*@egen*/
	public static void main(String args[]) throws ParseException, IOException {
		if(args.length != 1){
			System.out.println("Usage: Parser <file.yal>");
			return;
		}
		String filename = args[0];
		try{

			BufferedReader br = new BufferedReader(new FileReader(filename));
			Parser simpleParser = new Parser(br);
			SimpleNode root = simpleParser.Module();
			semantic.HIRTree hir = new semantic.HIRTree();
			semantic.SemanticChecker smc=  new semantic.SemanticChecker();
	  		root.dump("", hir);
	  		hir.dump("");
	  		smc.runSemanticCheck(hir, smc.getTable());
	  		codeGenerator.CodeGenerator cg = new codeGenerator.CodeGenerator(hir, smc.getTable());
	  		cg.generateCode();

	  	}catch(IOException e){
	  		e.printStackTrace();
	  	}
	}
}

PARSER_END(Parser)

SKIP:
{
	" "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
| <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

/* reserved words */
TOKEN : {
<RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
| <ADDSUB_OP: "+" | "-">
| <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
| <BITWISE_OP: "&" | "|" | "^">
| <NOT_OP: "!">
| <WHILE: "while">
| <IF: "if">
| <ELSE: "else">
| <ASSIGN: "=">
| <ASPA: "\"">
| <LPAR: "(">
| <RPAR: ")">
| <VIRG: ",">
| <PVIRG: ";">
| <LCHAVETA: "{">
| <RCHAVETA: "}">
| <FUNCTION: "function">
| <MODULE: "module">
| <SIZE: "size">
| < DOTSIZE: ".size" >
}

TOKEN : {
<INTEGER: (<DIGIT>)+>
| <ID: <LETTER> (<LETTER> | <DIGIT>)*>
| <#LETTER: ["$","A"-"Z","_","a"-"z"]>
| <#DIGIT: ["0"-"9"]>
| <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}

SimpleNode Module() : {/*@bgen(jjtree) Module */
  SimpleNode jjtn000 = new SimpleNode(JJTMODULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Module */
        try {
/*@egen*/
	<MODULE>Id()<LCHAVETA>(DeclarationList())(Function())*<RCHAVETA>/*@bgen(jjtree)*/
                                                                         {
                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                           jjtc000 = false;
                                                                         }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DeclarationList(): {/*@bgen(jjtree) DeclarationList */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) DeclarationList */
        try {
/*@egen*/
	(Declaration())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void Declaration() : {/*@bgen(jjtree) Declaration */
                       SimpleNode jjtn000 = new SimpleNode(JJTDECLARATION);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/ Token assign;  }
{/*@bgen(jjtree) Declaration */
        try {
/*@egen*//*@bgen(jjtree) #Array(> 1) */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTARRAY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	Lhs()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/          ( assign=<ASSIGN> { jjtn000.val = assign.image; } DeclarationRHS() )? <PVIRG>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void DeclarationRHS() : {/*@bgen(jjtree) DeclarationRHS */
                          SimpleNode jjtn000 = new SimpleNode(JJTDECLARATIONRHS);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/ Token id = new Token(); id.image = "undefined"; }
{/*@bgen(jjtree) DeclarationRHS */
        try {
/*@egen*/
	( ( "[" ArraySize() "]" ) | (id=<ADDSUB_OP> { jjtn000.val = id.image; } )? Integer() )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Function() : {/*@bgen(jjtree) Function */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Function */
          try {
/*@egen*/
	  <FUNCTION>/*@bgen(jjtree) #Return(> 1) */
                     {
                       SimpleNode jjtn001 = new SimpleNode(JJTRETURN);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                     }
                     try {
/*@egen*/ Function2()/*@bgen(jjtree)*/
                     } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         throw (RuntimeException)jjte001;
                       }
                       if (jjte001 instanceof ParseException) {
                         throw (ParseException)jjte001;
                       }
                       throw (Error)jjte001;
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                       }
                     }
/*@egen*/            <LPAR> (/*@bgen(jjtree) Parameters */
                                                     {
                                                       SimpleNode jjtn002 = new SimpleNode(JJTPARAMETERS);
                                                       boolean jjtc002 = true;
                                                       jjtree.openNodeScope(jjtn002);
                                                     }
                                                     try {
/*@egen*/ Varlist()/*@bgen(jjtree)*/
                                                     } catch (Throwable jjte002) {
                                                       if (jjtc002) {
                                                         jjtree.clearNodeScope(jjtn002);
                                                         jjtc002 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte002 instanceof RuntimeException) {
                                                         throw (RuntimeException)jjte002;
                                                       }
                                                       if (jjte002 instanceof ParseException) {
                                                         throw (ParseException)jjte002;
                                                       }
                                                       throw (Error)jjte002;
                                                     } finally {
                                                       if (jjtc002) {
                                                         jjtree.closeNodeScope(jjtn002, true);
                                                       }
                                                     }
/*@egen*/            )? <RPAR>  <LCHAVETA> Stmtlst() <RCHAVETA>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void Function2()       : { Token id; }
{
	 Id() ((ArrayElement())?<ASSIGN>  Id())?
}

void Function3()       : { }
{
  (ArrayElement())?<ASSIGN>  Id()
}

void Id() : {/*@bgen(jjtree) Id */
              SimpleNode jjtn000 = new SimpleNode(JJTID);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/ Token id; }
{/*@bgen(jjtree) Id */
 try {
/*@egen*/
 id=< ID >/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ { jjtn000.val = id.image; }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}
void Integer() : {/*@bgen(jjtree) Integer */
                   SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/ Token integer; }
{/*@bgen(jjtree) Integer */
        try {
/*@egen*/
	integer=< INTEGER >/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ { jjtn000.val = integer.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Varlist()     : { }
{
	(/*@bgen(jjtree) param */
           {
             SimpleNode jjtn001 = new SimpleNode(JJTPARAM);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*/  ScalarElement()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
           }
/*@egen*/       ) ( <VIRG> (/*@bgen(jjtree) param */
                                              {
                                                SimpleNode jjtn002 = new SimpleNode(JJTPARAM);
                                                boolean jjtc002 = true;
                                                jjtree.openNodeScope(jjtn002);
                                              }
                                              try {
/*@egen*/ ScalarElement()/*@bgen(jjtree)*/
                                              } catch (Throwable jjte002) {
                                                if (jjtc002) {
                                                  jjtree.clearNodeScope(jjtn002);
                                                  jjtc002 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte002 instanceof RuntimeException) {
                                                  throw (RuntimeException)jjte002;
                                                }
                                                if (jjte002 instanceof ParseException) {
                                                  throw (ParseException)jjte002;
                                                }
                                                throw (Error)jjte002;
                                              } finally {
                                                if (jjtc002) {
                                                  jjtree.closeNodeScope(jjtn002, true);
                                                }
                                              }
/*@egen*/       ) )*
}

void ScalarElement()     : { }
{
	Id() (ArrayElement())?
}
void ArrayElement(): {/*@bgen(jjtree) ArrayElement */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAYELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) ArrayElement */
        try {
/*@egen*/
	"[""]"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void Stmtlst()       : { }
{
	(Stmt())*
}
void Stmt()     : { }
{
	While() | If()(Else())? | (LOOKAHEAD(Call()) Call() < PVIRG > | Assign())   //ID
}
void Call(): {/*@bgen(jjtree) Call */
  SimpleNode jjtn000 = new SimpleNode(JJTCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Call */
         try {
/*@egen*/
	 Id() ( ( "." Id() )? <LPAR> ( ArgumentList() )? <RPAR> ) | ".size"/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}
void Assign(): {/*@bgen(jjtree) Assign */
                 SimpleNode jjtn000 = new SimpleNode(JJTASSIGN);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/ Token assign; }
{/*@bgen(jjtree) Assign */
        try {
/*@egen*//*@bgen(jjtree) #Array(> 1) */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTARRAY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	Lhs()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/           assign=< ASSIGN > { jjtn000.val = assign.image; }(LOOKAHEAD(3) Rhs() | Call())<PVIRG>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void Lhs()       : { }
{
	Id() (ArrayAccess() | ScalarAccess())
}
void Rhs() : {/*@bgen(jjtree) Rhs */
               SimpleNode jjtn000 = new SimpleNode(JJTRHS);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/ Token Op  = new Token(); Op.image = "Undefined";}
{/*@bgen(jjtree) Rhs */
        try {
/*@egen*/
	( Term() ( ( Op=<ARITH_OP> | Op=<BITWISE_OP> | Op=<ADDSUB_OP> ) { jjtn000.val = Op.image; } Term() )? )| "[" ArraySize() "]"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArrayAccess():{/*@bgen(jjtree) ArrayAccess */
                     SimpleNode jjtn000 = new SimpleNode(JJTARRAYACCESS);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/ Token ind = new Token(); ind.image = "undefined"; } // -- ID
{/*@bgen(jjtree) ArrayAccess */
        try {
/*@egen*/
	"[" (ind=< ID >| ind=< INTEGER >)? "]"/*@bgen(jjtree)*/
                                               {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
                                               }
/*@egen*/ { jjtn000.val = ind.image=="undefined"?"null":ind.image; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ //Optional Index. Now accepts statement b[] = 2; 
}
void ScalarAccess()     :{} // -- ID
{
	 ("." <SIZE>)? 
}

void ArraySize(): {/*@bgen(jjtree) ArraySize */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAYSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } // ++ ID
{/*@bgen(jjtree) ArraySize */
        try {
/*@egen*/
	Id() ScalarAccess() | Integer()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void Term(): {/*@bgen(jjtree) Term */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Term */
        try {
/*@egen*/
	( <ADDSUB_OP> )? ( Integer() | LOOKAHEAD(Call()) Call() | Id() ( ArrayAccess() | ScalarAccess()))/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ // ID
}

void Exprtest(): {/*@bgen(jjtree) Exprtest */
                   SimpleNode jjtn000 = new SimpleNode(JJTEXPRTEST);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/ Token RelOp; }
{/*@bgen(jjtree) Exprtest */
        try {
/*@egen*/
	<LPAR> Lhs() RelOp=<RELA_OP> { jjtn000.val = RelOp.image; } Rhs() <RPAR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void While(): {/*@bgen(jjtree) While */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) While */
        try {
/*@egen*/
	<WHILE> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void If(): {/*@bgen(jjtree) If */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) If */
        try {
/*@egen*/
	<IF> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void Else(): {/*@bgen(jjtree) Else */
  SimpleNode jjtn000 = new SimpleNode(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Else */
        try {
/*@egen*/
	<ELSE> <LCHAVETA> Stmtlst() <RCHAVETA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void ArgumentList():{/*@bgen(jjtree) ArgumentList */
  SimpleNode jjtn000 = new SimpleNode(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgumentList */
        try {
/*@egen*/
	Argument() ( <VIRG> Argument() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void Argument()     :{}
{
	( Id() | String() | Integer() )
}

void String() : {/*@bgen(jjtree) String */
                  SimpleNode jjtn000 = new SimpleNode(JJTSTRING);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token id; }
{/*@bgen(jjtree) String */
 try {
/*@egen*/
 id=<STRING>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { jjtn000.val = id.image; }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

Token Index():{/*@bgen(jjtree) Index */
               SimpleNode jjtn000 = new SimpleNode(JJTINDEX);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Index */
        try {
/*@egen*/
	(t=< ID >| t=< INTEGER >)/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/ { return t; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}